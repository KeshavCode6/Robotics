{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nintake_motor = Motor(Ports.PORT11, GearSetting.RATIO_6_1, False)\ncatapult_motor_motor_a = Motor(Ports.PORT4, GearSetting.RATIO_36_1, True)\ncatapult_motor_motor_b = Motor(Ports.PORT5, GearSetting.RATIO_36_1, False)\ncatapult_motor = MotorGroup(catapult_motor_motor_a, catapult_motor_motor_b)\nleft_drive_smart = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project for Avenger Robotics team\n#\tAuthor:       VEX, Keshav Shah\n#\tCreated:      8/27/23\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\nmovementStyles = {\n    \"tank\":0,\n}\n\n# utillity\nclass Utils:\n    @staticmethod\n    def Print(value):\n        brain.screen.print(value)\n        brain.screen.next_row()\n\n# autonoumous \nclass AutonomousHandler:\n    def __init__(self):\n        Utils.Print(\"Autonomous Mode Active\")\n\n    def Turn(self, degrees, LEFTORRIGHT, DIRECTION=FORWARD):\n        drivetrain.turn(LEFT)\n\n    def Move(self, DIRECTION, AMT, UNITS):\n        drivetrain.drive_for(DIRECTION, AMT, UNITS)\n        \n    def Stop(self):\n        if left_drive_smart.is_spinning():\n            left_drive_smart.stop()\n        if right_drive_smart.is_spinning():\n            right_drive_smart.stop()\n\n# controller\nclass ControllerHandler:\n    def __init__(self):\n        self.leftSideSpeed = controller_1.axis3.position()\n        self.rightSideSpeed = controller_1.axis2.position()\n        self.SwitchMode(\"tank\") \n\n    def UpdateControllerAxisPosition(self):\n        # Updating controller axis position\n        self.leftSideSpeed = controller_1.axis3.position()\n        self.rightSideSpeed = controller_1.axis2.position()  \n    \n    def SwitchMode(self, newMode):\n        try:\n            self.movementStyle = movementStyles[newMode]\n        except Exception as e:\n            Utils.Print(\"Could not switch mode, try again\")\n            return\n\n        Utils.Print(\"(\"+str(self.movementStyle)+\") Current Mode: \"+newMode)\n\n    def HandleTankStyleMovement(self):\n         # checking if controller is not in the deadzone\n        if self.leftSideSpeed > -5 or self.leftSideSpeed < 5:\n            # moving left side motors with left side input\n            left_drive_smart.set_velocity(self.leftSideSpeed, PERCENT)\n            left_drive_smart.spin(FORWARD)\n        else:\n            # stopping left side motors if not stopped already\n            if left_drive_smart.is_spinning():\n                left_drive_smart.stop()\n\n        # checking if controller is not in the deadzone\n        if self.rightSideSpeed > -5 or self.rightSideSpeed < 5:\n            # moving left right motors with left side input\n            right_drive_smart.set_velocity(self.rightSideSpeed, PERCENT)\n            right_drive_smart.spin(FORWARD)\n        else:\n            # stopping right side motors if not stopped already\n            if right_drive_smart.is_spinning():\n                right_drive_smart.stop()\n    \n    # Updating all things\n    def UpdateAll(self):\n        # Updating controller axis position\n        self.UpdateControllerAxisPosition()\n        # TANK MOVEMENT\n        if self.movementStyle == 0:\n            self.HandleTankStyleMovement()\n\n# To handle intake    \nclass IntakeHandler:\n    def __init__(self):\n        self.ChangeSpeed(100)\n    \n    # Changing intake spinning speed\n    def ChangeSpeed(self, newSpeed):\n        self.intakeSpeed = newSpeed\n        intake_motor.set_velocity(self.intakeSpeed, PERCENT)\n        Utils.Print(\"Intake motor speed set to \"+ str(newSpeed))  \n\n    # Handling input\n    def UpdateAll(self):\n        if controller_1.buttonL1.pressing() and not controller_1.buttonL2.pressing():\n            intake_motor.spin(REVERSE)\n        if not controller_1.buttonL1.pressing() and controller_1.buttonL2.pressing():\n            intake_motor.spin(FORWARD)  \n\n        if not controller_1.buttonL1.pressing() and not controller_1.buttonL2.pressing():\n            intake_motor.stop()       \n\n# Catapult\nclass CatapultHandler:\n    def __init__(self):\n        self.ChangeSpeed(100)\n\n    # Changing intake spinning speed\n    def ChangeSpeed(self, newSpeed):\n        self.speed = newSpeed\n        catapult_motor.set_velocity(self.speed, PERCENT)\n        Utils.Print(\"Flipper motor speed set to \"+ str(newSpeed))    \n\n    def Launch(self):\n        if controller_1.buttonR1.pressing():\n            catapult_motor.spin(REVERSE)\n            catapult_motor.set_stopping(HOLD)\n        else:\n            catapult_motor.stop()\n\ndef autonomous():\n    ah =  AutonomousHandler()\n    ah.Move(FORWARD, 200, MM)\n\n\ndef driver_control():\n    controllerHandler = ControllerHandler()\n    intakeHandler = IntakeHandler()\n    catapultHandler = CatapultHandler()\n\n    Utils.Print(\"-- Driver Control Mode Active --\")\n    controller_1.rumble(\"-.-.\")     \n\n    while True:\n        controllerHandler.UpdateAll()\n        intakeHandler.UpdateAll()\n        catapultHandler.Launch()\n        if controller_1.buttonA.pressing():\n            Utils.Print(\"TURNING OFF ALL MOTORS\")\n            left_drive_smart.stop()\n            right_drive_smart.stop()\n            intake_motor.stop()\n            catapult_motor.stop()\n            return\n\n\n#competition = Competition(driver_control, autonomous)\n\ndriver_control()\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[11],"name":"intake_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[4,5],"name":"catapult_motor","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[2,20,null],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180","id":"partner"},"triportSourcePort":null}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.2","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}