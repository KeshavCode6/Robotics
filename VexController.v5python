{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX, Keshav Shah\n#\tCreated:      8/31/23\n#\tDescription:  VEXcode V5 Python Project. Contains functionality for movement as of now\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n\n# SUCTION WHEEL FUNCTIONALITY. DOES NOT WORK YET\n#suctionWheels_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\n#suctionWheels_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\n#suctionWheels = MotorGroup(suctionWheels_motor_a, suctionWheels_motor_b)\n# class SuctionWheelHandler:\n#     def __init__(self, direction):\n#         self.suctionButton = controller_1.buttonL1\n#         self.reverseButton = controller_1.buttonR2\n#         suctionWheels.spin(direction)\n    \n#     def UpdateAll(self):\n#         # Handling controller input to suck or reverse \n#         if self.suctionButton.pressing():\n#             suctionWheels.spin(FORWARD)\n#         elif self.reverseButton.pressing():\n#             suctionWheels.spin(REVERSE)\n#         elif !self.suctionButton.pressing() || self.reverseButton.pressing():\n#             if suctionWheels.is_spinning():\n#                 suctionWheels.stop()\n\n# Handles robot movement\nclass ControllerHandler:\n    def __init__(self):\n        self.leftSideSpeed = controller_1.axis3.position()\n        self.rightSideSpeed = controller_1.axis2.position()\n        self.movementStyle = \"Tank\"\n\n    # Updating controller axis position. See controller for axis refrence\n    def UpdateControllerAxisPosition(self):\n        self.leftSideSpeed = controller_1.axis3.position()\n        self.rightSideSpeed = controller_1.axis2.position()        \n    \n    # Controlling tank style movement (left joystick controls left motors, right controls right)\n    def HandleTankStyleMovement(self):\n         # checking if controller is not in the deadzone\n        if self.leftSideSpeed > -5 or self.leftSideSpeed < 5:\n            # moving left side motors with left side input\n            left_drive_smart.set_velocity(self.leftSideSpeed, PERCENT)\n            left_drive_smart.spin(FORWARD)\n        else:\n            # stopping left side motors if not stopped already\n            if left_drive_smart.is_spinning():\n                left_drive_smart.stop()\n\n        # checking if controller is not in the deadzone\n        if self.rightSideSpeed > -5 or self.rightSideSpeed < 5:\n            # moving left right motors with left side input\n            right_drive_smart.set_velocity(self.rightSideSpeed, PERCENT)\n            right_drive_smart.spin(FORWARD)\n        else:\n            # stopping right side motors if not stopped already\n            if right_drive_smart.is_spinning():\n                right_drive_smart.stop()\n    \n    # Updating everything\n    def UpdateAll(self):\n        # Updating controller axis position\n        self.UpdateControllerAxisPosition()\n\n        # Moving based on movement style\n        if self.movementStyle == \"Tank\":\n            self.HandleTankStyleMovement()\n \ncontrollerHandler = ControllerHandler()\n#suctionWheelHandler = SuctionWheelHandler()\n\n# Main Loop\nwhile True:\n    controllerHandler.UpdateAll()\n    #suctionWheelHandler.UpdateAll()","textLanguage":"python","rconfig":[{"port":[2],"name":"left_drive_smart","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"right_drive_smart","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.2","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}